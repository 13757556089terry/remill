/* Copyright 2015 Peter Goodman (peter@trailofbits.com), all rights reserved. */

#include <functional>

namespace {

template <typename Op, typename D, typename S1>
DEF_SEM(BINARY_OP, D dst_src1, S1 src2_) {
  auto src1 = R(dst_src1);
  auto src2 = R(src2_);
  auto res = Op()(src1, src2);
  SET_AFLAGS(src1, src2, res);
  W(dst_src1) = res;
}

template <typename Op, typename D, typename S1, typename S2>
DEF_SEM(BINARY_OP2, D dst, S1 src1_, S2 src2_) {
  auto src1 = R(src1_);
  auto src2 = R(src2_);
  auto res = Op()(src1, src2);
  SET_AFLAGS(src1, src2, res);
  W(dst) = res;
}

#define DEFINE_OP(name, op) \
    template <typename D, typename S1> \
    DEF_SEM(name, D dst_src1, S1 src2_) { \
      BINARY_OP<op<S1>, D, S1>(state, dst_src1, src2_); \
    } \
    template <typename D, typename S1, typename S2> \
    DEF_SEM(name ## 2, D dst, S1 src1_, S2 src2_) { \
      BINARY_OP2<op<S1>, D, S1, S2>(state, dst, src1_, src2_); \
    }

template <typename D, typename S1>
DEF_SEM(CMP, D src1_, S1 src2_) {
  auto src1 = static_cast<intptr_t>(R(src1_));
  auto src2 = static_cast<intptr_t>(R(src2_));
  auto res = src1 - src2;
  SET_AFLAGS(src1, src2, res);
}

template <typename D, typename S1>
DEF_SEM(TEST, D src1_, S1 src2_) {
  auto src1 = static_cast<intptr_t>(R(src1_));
  auto src2 = static_cast<intptr_t>(R(src2_));
  auto res = src1 & src2;
  SET_BFLAGS(src1, src2, res);
}

DEFINE_OP(ADD, std::plus)
DEFINE_OP(SUB, std::minus)
DEFINE_OP(MUL, std::multiplies)
DEFINE_OP(DIV, std::divides)

#undef DEFINE_OP

}  // namespace

DEF_ISEL(ADD_MEMb_IMMb_80r0_8) = ADD<M8, I8>;
DEF_ISEL(ADD_GPR8_IMMb_80r0_8) = ADD2<R8W, R8, I8>;
DEF_ISEL_Mn_Mn_In(ADD_MEMv_IMMz, ADD);
DEF_ISEL_Rn_Rn_In(ADD_GPRv_IMMz, ADD2);
DEF_ISEL(ADD_MEMb_IMMb_82r0_8) = ADD<M8, I8>;
DEF_ISEL(ADD_GPR8_IMMb_82r0_8) = ADD2<R8W, R8, I8>;
DEF_ISEL_Mn_Mn_In(ADD_MEMv_IMMb, ADD);
DEF_ISEL_Rn_Rn_In(ADD_GPRv_IMMb, ADD2);
DEF_ISEL(ADD_MEMb_GPR8_8) = ADD<M8, R8>;
DEF_ISEL(ADD_GPR8_GPR8_00_8) = ADD2<R8W, R8, R8>;
DEF_ISEL_Mn_Mn_Rn(ADD_MEMv_GPRv, ADD);
DEF_ISEL_Rn_Rn_Rn(ADD_GPRv_GPRv_01, ADD2);
DEF_ISEL(ADD_GPR8_MEMb_8) = ADD2<R8W, R8, M8>;
DEF_ISEL(ADD_GPR8_GPR8_02_8) = ADD2<R8W, R8, R8>;
DEF_ISEL_Rn_Rn_Mn(ADD_GPRv_MEMv, ADD2);
DEF_ISEL_Rn_Rn_Rn(ADD_GPRv_GPRv_03, ADD2);
DEF_ISEL(ADD_AL_IMMb) = ADD2<R8W, R8, I8>;
DEF_ISEL_Rn_Rn_In(ADD_OrAX_IMMz, ADD2);

DEF_ISEL(SUB_MEMb_IMMb_80r5_8) = SUB<M8, I8>;
DEF_ISEL(SUB_GPR8_IMMb_80r5_8) = SUB2<R8W, R8, I8>;
DEF_ISEL_Mn_Mn_In(SUB_MEMv_IMMz, SUB);
DEF_ISEL_Rn_Rn_In(SUB_GPRv_IMMz, SUB2);
DEF_ISEL(SUB_MEMb_IMMb_82r5_8) = SUB<M8, I8>;
DEF_ISEL(SUB_GPR8_IMMb_82r5_8) = SUB2<R8W, R8, I8>;
DEF_ISEL_Mn_Mn_In(SUB_MEMv_IMMb, SUB);
DEF_ISEL_Rn_Rn_In(SUB_GPRv_IMMb, SUB2);
DEF_ISEL(SUB_MEMb_GPR8_8) = SUB<M8, I8>;
DEF_ISEL(SUB_GPR8_GPR8_28_8) = SUB2<R8W, R8, R8>;
DEF_ISEL_Mn_Mn_Rn(SUB_MEMv_GPRv, SUB);
DEF_ISEL_Rn_Rn_Rn(SUB_GPRv_GPRv_29, SUB2);
DEF_ISEL(SUB_GPR8_GPR8_2A_8) = SUB2<R8W, R8, R8>;
DEF_ISEL(SUB_GPR8_MEMb_8) = SUB2<R8W, R8, M8>;
DEF_ISEL_Rn_Rn_Rn(SUB_GPRv_GPRv_2B, SUB2);
DEF_ISEL_Rn_Rn_Mn(SUB_GPRv_MEMv, SUB2);
DEF_ISEL(SUB_AL_IMMb_8) = SUB2<R8W, R8, I8>;
DEF_ISEL_Rn_Rn_In(SUB_OrAX_IMMz, SUB2);

/*
1254 IMUL IMUL_MEMb BINARY BASE I86 ATTRIBUTES: BYTEOP
1255 IMUL IMUL_GPR8 BINARY BASE I86 ATTRIBUTES: BYTEOP
1256 IMUL IMUL_MEMv BINARY BASE I86 ATTRIBUTES: SCALABLE
1257 IMUL IMUL_GPRv BINARY BASE I86 ATTRIBUTES: SCALABLE
1258 IMUL IMUL_GPRv_MEMv_IMMz BINARY BASE I186 ATTRIBUTES: SCALABLE
1259 IMUL IMUL_GPRv_GPRv_IMMz BINARY BASE I186 ATTRIBUTES: SCALABLE
1260 IMUL IMUL_GPRv_MEMv_IMMb BINARY BASE I186 ATTRIBUTES: SCALABLE
1261 IMUL IMUL_GPRv_GPRv_IMMb BINARY BASE I186 ATTRIBUTES: SCALABLE
1262 IMUL IMUL_GPRv_MEMv BINARY BASE I86 ATTRIBUTES: SCALABLE
1263 IMUL IMUL_GPRv_GPRv BINARY BASE I86 ATTRIBUTES: SCALABLE
 */

/*
740 MUL MUL_MEMb BINARY BASE I86 ATTRIBUTES: BYTEOP
741 MUL MUL_GPR8 BINARY BASE I86 ATTRIBUTES: BYTEOP
742 MUL MUL_MEMv BINARY BASE I86 ATTRIBUTES: SCALABLE
743 MUL MUL_GPRv BINARY BASE I86 ATTRIBUTES: SCALABLE
 */

/*
557 IDIV IDIV_MEMb BINARY BASE I86 ATTRIBUTES: BYTEOP
558 IDIV IDIV_GPR8 BINARY BASE I86 ATTRIBUTES: BYTEOP
559 IDIV IDIV_MEMv BINARY BASE I86 ATTRIBUTES: SCALABLE
560 IDIV IDIV_GPRv BINARY BASE I86 ATTRIBUTES: SCALABLE
 */

/*
1293 DIV DIV_MEMb BINARY BASE I86 ATTRIBUTES: BYTEOP
1294 DIV DIV_GPR8 BINARY BASE I86 ATTRIBUTES: BYTEOP
1295 DIV DIV_MEMv BINARY BASE I86 ATTRIBUTES: SCALABLE
1296 DIV DIV_GPRv BINARY BASE I86 ATTRIBUTES: SCALABLE
 */

DEF_ISEL(CMP_MEMb_IMMb_80r7_8) = CMP<M8, I8>;
DEF_ISEL(CMP_GPR8_IMMb_80r7_8) = CMP<R8, I8>;
DEF_ISEL_RO_Mn_In(CMP_MEMv_IMMz, CMP);
DEF_ISEL_RO_Rn_In(CMP_GPRv_IMMz, CMP);
DEF_ISEL(CMP_MEMb_IMMb_82r7_8) = CMP<M8, I8>;
DEF_ISEL(CMP_GPR8_IMMb_82r7_8) = CMP<R8, I8>;
DEF_ISEL_RO_Mn_In(CMP_MEMv_IMMb, CMP);
DEF_ISEL_RO_Rn_In(CMP_GPRv_IMMb, CMP);
DEF_ISEL(CMP_MEMb_GPR8_8) = CMP<M8, I8>;
DEF_ISEL(CMP_GPR8_GPR8_38_8) = CMP<R8, R8>;
DEF_ISEL_RO_Mn_Rn(CMP_MEMv_GPRv, CMP);
DEF_ISEL_RO_Rn_Rn(CMP_GPRv_GPRv_39, CMP);
DEF_ISEL(CMP_GPR8_GPR8_3A_8) = CMP<R8, R8>;
DEF_ISEL(CMP_GPR8_MEMb_8) = CMP<R8, M8>;
DEF_ISEL_RO_Rn_Rn(CMP_GPRv_GPRv_3B, CMP);
DEF_ISEL_RO_Rn_Mn(CMP_GPRv_MEMv, CMP);
DEF_ISEL(CMP_AL_IMMb_8) = CMP<R8, I8>;
DEF_ISEL_RO_Rn_In(CMP_OrAX_IMMz, CMP);

DEF_ISEL(TEST_MEMb_IMMb_F6r0_8) = TEST<M8, I8>;
DEF_ISEL(TEST_MEMb_IMMb_F6r1_8) = TEST<M8, I8>;
DEF_ISEL(TEST_GPR8_IMMb_F6r0_8) = TEST<R8, I8>;
DEF_ISEL(TEST_GPR8_IMMb_F6r1_8) = TEST<R8, I8>;
DEF_ISEL_RO_Mn_In(TEST_MEMv_IMMz_F7r0, TEST);
DEF_ISEL_RO_Mn_In(TEST_MEMv_IMMz_F7r1, TEST);
DEF_ISEL_RO_Rn_In(TEST_GPRv_IMMz_F7r0, TEST);
DEF_ISEL_RO_Rn_In(TEST_GPRv_IMMz_F7r1, TEST);
DEF_ISEL(TEST_MEMb_GPR8_8) = TEST<M8, R8>;
DEF_ISEL(TEST_GPR8_GPR8_8) = TEST<R8, R8>;
DEF_ISEL_RO_Mn_Rn(TEST_MEMv_GPRv, TEST);
DEF_ISEL_RO_Rn_Rn(TEST_GPRv_GPRv, TEST);
DEF_ISEL(TEST_AL_IMMb_8) = TEST<R8, I8>;
DEF_ISEL_RO_Rn_In(TEST_OrAX_IMMz, TEST);
